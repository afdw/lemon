var http = require("http");
var fs = require("fs");
var path = require("path");
var mime = require("mime");
var lemonUtils = require("lemon_utils");
var lemonLogger = require("lemon_logger");

module.exports = {};
var Server = function(params)
{
	params = lemonUtils.objectDefaults(params, {
		hosts: ["127.0.0.1"],
		port: 80
	});
	this.routes = [];
	this.server = http.createServer();
	this.server.on("request", function(request, response)
	{
		lemonLogger.info(lemonUtils.format("%1 %2", request.method, request.url));
		var founded = false;
		this.routes.forEach(function(route)
		{
			var regexp = new RegExp("^" + route.mask.replace(/\$\{[0-9a-zA-Z_]+\}/g, "([0-9a-zA-Z_]+)") + "/?$");
			//console.log(regexp);
			if(route.method.toLowerCase() == request.method.toLowerCase() && regexp.test(request.url))
			{
				var params = {};
				var paramNames = route.mask.match(/\$\{([0-9a-zA-Z_]+)\}/g);
				var paramValues = request.url.match(regexp);
				paramValues.splice(0, 1);
				if(paramNames)
				{
					paramNames.forEach(function(paramName, index)
					{
						params[paramName.substr(2, paramName.length - 3)] = paramValues[index];
					});
				}
				else
				{
					params = paramValues;
				}
				founded = true;
				route.callback(request, response, params);
			}
		});
		if(!founded)
		{
			response.writeHead(404, {'Content-Type': mime.lookup("file.html")});
			response.write("404 Not Found");
			response.end();
		}
	}.bind(this));
	params.hosts.forEach(function(host)
	{
		this.server.listen(params.port, host, function()
		{
			lemonLogger.info(lemonUtils.format("Listening %1 on port %2... You can go to http://%1:%2", host, params.port));
		});
	}.bind(this));
};
["all", "get", "post", "delete", "put"].forEach(function(method)
{
	Server.prototype[method] = function(mask, callback)
	{
		if(method != "all")
		{
			this.routes.push({method: method, mask: mask, callback: callback})
		}
		else
		{
			["get", "post", "delete", "put"].forEach(function(method)
			{
				this.routes.push({method: method, mask: mask, callback: callback})
			}.bind(this));
		}
	}
});
Server.prototype.generateStaticCallback = function(basepath)
{
	return function(request, response, params)
	{
		var staticPath = basepath + params[0];
		fs.exists(staticPath, function(exists)
		{
			if(exists)
			{
				fs.lstat(staticPath, function(err, stat)
				{
					if(stat.isDirectory())
					{
						staticPath += "/index.html";
					}
					fs.exists(staticPath, function(exists2)
					{
						if(exists2)
						{
							fs.readFile(staticPath, function(err, data)
							{
								if(err)
								{
									throw err;
								}
								response.writeHead(200, {'Content-Type': mime.lookup(staticPath)});
								response.write(data);
								response.end();
							});
						}
						else
						{
							response.writeHead(404, {'Content-Type': mime.lookup("file.html")});
							response.write("404 Not Found");
							response.end();
						}
					});
				});
			}
			else
			{
				response.writeHead(404, {'Content-Type': mime.lookup("file.html")});
				response.write("404 Not Found");
				response.end();
			}
		});
	};
};
module.exports.Server = Server;