var fs = require("fs");
var path = require("path");

var Templater = function(template, params)
{
	this.params = params;
	this.templateText = template;
	this.file = "";
	this.onfinish = this.resultFunction = function()
	{
		return "";
	};
	fs.exists(template, function(exists)
	{
		if(exists)
		{
			fs.lstat(template, function(error, stats)
			{
				if(error)
				{
					throw error;
				}
				if(stats.isFile())
				{
					fs.readFile(template, "utf8", function(error, text)
					{
						if(error)
						{
							throw error;
						}
						this.templateText = text;
						this.file = template;
						this.compile();
					}.bind(this))
				}
				else
				{
					this.compile();
				}
			}.bind(this));
		}
		else
		{
			this.compile();
		}
	}.bind(this));
};
Templater.prototype.compile = function()
{
	var resultText = this.templateText;
	resultText = resultText.replace(/\}\n/g, "}"); //remove new lines after brackets
	resultText = resultText.replace(/\n/g, "\\n"); //escape new lines
	resultText = resultText.replace(/\"/g, "\\\""); //escape quotes
	resultText = resultText.replace(/\\{/g, "escapedOpenBracket"); //escape escaped open figure brackets
	var currentVariable = "out", definedVariables = ["out"], load = [], loaded = 0, variables = "";
	resultText = resultText.replace(/\{(\/?)(\!?)([A-Za-z0-9{} :.]+?)}?\}/g, function(all, isClose, isComment, blockParams)
	{
		//console.log(isClose, blockParams);
		//return "";
		var blockParamsSplit = blockParams.split(" ");
		blockParamsSplit.forEach(function(param, index)
		{
			blockParamsSplit[index] = param.replace(/\\\"/g, "\"");
		});
		if(isComment)
		{
			return "";
		}
		if(!isClose)
		{
			if(blockParamsSplit[0] == "if")
			{
				return "\"; if(" + blockParamsSplit.slice(1).join(" ") + "){" + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "else")
			{
				return "\";}else{out += \"";
			}
			if(blockParamsSplit[0] == "echo")
			{
				return "\"; out += " + blockParamsSplit.slice(1).join(" ") + "; " + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "foreach")
			{
				var params = blockParamsSplit[3].split(":")[0];
				if(blockParamsSplit[3].split(":")[1])
				{
					params += ", "  + blockParamsSplit[3].split(":")[1];
				}
				return "\"; " + blockParamsSplit[1] + ".forEach(function(" + params + "){ " + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "variable")
			{
				currentVariable = blockParamsSplit[1];
				if(definedVariables.indexOf(currentVariable) == -1)
				{
					return "\"; var " + currentVariable + " = \"\"; " + currentVariable + " += \"";
				}
				return "\"; " + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "require")
			{
				var requireName = "req" + Math.floor(Math.random() * 10000);
				load.push({name: this.file ? path.dirname(this.file) + "/" + blockParamsSplit[1] : blockParamsSplit[1] , params: blockParamsSplit.slice(2).join(" ") + "}", variable: requireName});
				return "\"; out += " + requireName + "(" + blockParamsSplit.slice(2).join(" ") + "}" + "); " + currentVariable + " += \"";
			}
		}
		else
		{
			if(blockParamsSplit[0] == "foreach")
			{
				return "\";}); " + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "if")
			{
				return "\";}; " + currentVariable + " += \"";
			}
			if(blockParamsSplit[0] == "variable")
			{
				currentVariable = "out";
				return "\"; " + currentVariable + " += \"";
			}
		}
	}.bind(this));
	var end = function()
	{
		if(load.length == loaded)
		{
			resultText = variables + "var out = \"" + resultText + "\"; return out;";
			resultText = resultText.replace(/escapedOpenBracket/g, "{"); //escape escaped escaped open figure brackets
			//console.log(resultText);
			this.resultFunction = new Function("params", resultText);
			this.onfinish();
		}
	}.bind(this);
	if(load.length)
	{
		load.forEach(function(template)
		{
			(new Templater(template.name, {})).getResultFunction(function(func)
			{
				variables += "var " + template.variable + " = (" + func.toString() + "); ";
				loaded++;
				end();
			}.bind(this));
		});
	}
	else
	{
		end();
	}
};
Templater.prototype.render = function(callback)
{
	this.onfinish = function()
	{
		callback(this.resultFunction(this.params));
	}
};
Templater.prototype.renderToRes = function(куы)
{
	this.onfinish = function()
	{
		callback();
		response.writeHead(200, {'Content-Type': mime.lookup("file.html")});
		response.write(this.resultFunction(this.params));
		response.end();
	}
};
Templater.prototype.getResultFunction = function(callback)
{
	this.onfinish = function()
	{
		callback(this.resultFunction);
	}
};
module.exports = Templater;