var fs = require("fs");
var fsExtra = require("fs-extra");
var path = require("path");
var ncp = require("ncp").ncp;
var clc = require("cli-color");
var lemonDatabase = require("lemon_database");
var lemonHttp = require("lemon_http");

var helps = {
	"help": {title: "Show help", description: "Show help about this CLI.", usage: "help [method]"},
	"about": {title: "Show about", description: "Show information about this.", usage: "about"},
	"version": {title: "Show version of framework", description: "Show version of this framework.", usage: "version"},
	"new": {title: "Create new Lemon project", description: "Create new Lemon project in folder.", usage: "new folder"},
	"db": {title: "Work with DB", description: "Work with database. Details in documentation.", usage: "db operation [...]"},
	"http": {title: "Start http server", description: "Start http web server.", usage: "version"}
};
var methods = {
	"help": {
		checkParams: function(params)
		{
			if(params.length > 1)
			{
				return "Too many params";
			}
			if(params.length == 1)
			{
				if(!helps[params[0]])
				{
					return "Help about this command does not exists";
				}
			}
		}, exec: function(params, callback)
		{
			if(params.length == 1)
			{
				callback("Description: " + helps[params[0]].description + "\nUsage: " + helps[params[0]].usage);
			}
			else
			{
				var result = "";
				for(var helpName in helps)
				{
					if(helps.hasOwnProperty(helpName))
					{
						var help = helps[helpName];
						result += clc.bold(helpName);
						result += clc.white(new Array(Math.max(process.stdout.columns - helpName.length - help.title.length, 3) + 1).join(".")); // separator (dots)
						result += help.title;
						result += "\n";
					}
				}
				callback(result.substr(0, result.length - 1)); // remove new line on end
			}
		}
	},
	"about": {
		checkParams: function(params)
		{
			if(params.length > 0)
			{
				return "Too many params";
			}
		}, exec: function(params, callback)
		{
			callback("This is CLI of Node.JS framework Lemon. Type \"help\" to see the help.");
		}
	},
	"version": {
		checkParams: function(params)
		{
			if(params.length > 0)
			{
				return "Too many params";
			}
		}, exec: function(params, callback)
		{
			callback("Lemon version: 0.00001");
		}
	},
	"new": {
		checkParams: function(params)
		{
			if(params.length != 1)
			{
				return "Too many or not enough params";
			}
		}, exec: function(params, callback)
		{
			fsExtra.mkdirp(params[0], function(error)
			{
				if(error)
				{
					return callback(clc.bold(clc.red(error)));
				}
				ncp(__dirname + "/../../project_template/", params[0], function(error)
				{
					if(error)
					{
						return callback(clc.bold(clc.red(error)));
					}
					return callback(clc.bold(clc.green("Successful created")));
				});
			});
		}
	},
	"db": {
		checkParams: function(params)
		{
			//TODO: create this check
		}, exec: function(params, callback)
		{
			isLemonProject(function(is)
			{
				if(!is)
				{
					return callback(clc.bold(clc.red("This dir is not Lemon project")));
				}
				switch(params[0])
				{
					case "build":
						var DBConfig = require(process.cwd() + "/configs/db.js");
						var connection = new lemonDatabase.Connection(DBConfig, function(error)
						{
							if(error)
							{
								return callback(clc.bold(clc.red(error)));
							}
							var order = require(process.cwd() + "/database/order.js");
							var next = function()
							{
								var fileName = order[current];
								if(current == order.length)
								{
									connection.close();
									return;
								}
								if(path.extname(fileName) == ".sql")
								{
									fs.readFile(process.cwd() + "/database/" + fileName, "utf8", function(error, data)
									{
										if(error)
										{
											return callback(clc.bold(clc.red(error)));
										}
										connection.exec(data, [], function(error, result)
										{
											if(error)
											{
												return callback(clc.bold(clc.red(error)));
											}
											current++;
											next();
										});
									});
								}
								if(path.extname(fileName) == ".js")
								{
									require(process.cwd() + "/database/" + fileName)(connection, function()
									{
										current++;
										next();
									});
								}
							}, current = 0;
							next();
						});
						break;
					default:
						callback(clc.bold(clc.red("This operation does not supported")));
				}
			});
		}
	},
	"http": {
		checkParams: function(params)
		{
			if(params.length > 0)
			{
				return "Too many params";
			}
		}, exec: function(params, callback)
		{
			isLemonProject(function(is)
			{
				if(!is)
				{
					return callback(clc.bold(clc.red("This dir is not Lemon project")));
				}
				var server = new lemonHttp.Server(require(process.cwd() + "/configs/http.js"));
				/*fs.readdir(process.cwd() + "/controllers", function(error, files)
				{
					if(error)
					{
						return callback(clc.bold(clc.red(error)));
					}
					files.forEach(function(file)
					{
						require(process.cwd() + "/controllers/" + file)(server);
					});
				});*/
				require(process.cwd() + "/routes.js")(server);
			});
		}
	}
};
function isLemonProject(callback)
{
	fs.exists(".lemon", callback);
}
var defaultMethod = "about";
var args = process.argv.slice(2);
var method = args[0] || defaultMethod;
if(methods[method])
{
	var error = methods[method].checkParams(args.slice(1));
	if(!error)
	{
		methods[method].exec(args.slice(1), console.log.bind(console));
	}
	else
	{
		console.log(clc.bold(clc.red(error)));
		if(helps[args[0]])
		{
			console.log("Usage: " + helps[args[0]].usage);
		}
	}
}
else
{
	console.log("This method does not exists");
}